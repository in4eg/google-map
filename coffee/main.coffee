# initMap = ->
# 	uluru = 
# 		lat: -25.363
# 		lng: 131.044
# 	map = new (google.maps.Map)(document.getElementById('map'),
# 		zoom: 4
# 		center: uluru)
# 	marker = new (google.maps.Marker)(
# 		position: uluru
# 		map: map)
# 	return


# google.maps.event.addDomListener window, 'load', initMap


# if HTML DOM Element that contains the map is found...
# The number of steps that each panTo action will undergo

panTo = (newLat, newLng) ->
  if panPath.length > 0
    # We are already panning...queue this up for next move
    panQueue.push [
      newLat
      newLng
    ]
  else
    # Lets compute the points we'll use
    panPath.push 'LAZY SYNCRONIZED LOCK'
    # make length non-zero - 'release' this before calling setTimeout
    curLat = map.getCenter().lat()
    curLng = map.getCenter().lng()
    dLat = (newLat - curLat) / STEPS
    dLng = (newLng - curLng) / STEPS
    i = 0
    while i < STEPS
      panPath.push [
        curLat + dLat * i
        curLng + dLng * i
      ]
      i++
    panPath.push [
      newLat
      newLng
    ]
    panPath.shift()
    # LAZY SYNCRONIZED LOCK
    setTimeout doPan, 20
  return

doPan = ->
  next = panPath.shift()
  if next != null
    # Continue our current pan action
    map.panTo new (google.maps.LatLng)(next[0], next[1])
    setTimeout doPan, 20
  else
    # We are finished with this pan - check if there are any queue'd up locations to pan to 
    queued = panQueue.shift()
    if queued != null
      panTo queued[0], queued[1]
    else
      map.setZoom zoom
  return

# the smooth zoom function

smoothZoom = (map, max, cnt) ->
  if cnt >= max
    return
  else
    z = google.maps.event.addListener(map, 'zoom_changed', (event) ->
      google.maps.event.removeListener z
      r map, max, cnt + 1
      return
    )
    setTimeout (->
      map.setZoom cnt
      return
    ), 80
    # 80ms is what I found to work well on my system -- it might not work well on all systems
  return

if document.getElementById('map-canvas')
  zoom = undefined
  # Coordinates to center the map
  myLatlng = new (google.maps.LatLng)(52.525595, 13.393085)
  # Other options for the map, pretty much selfexplanatory
  mapOptions = 
    zoom: 10
    center: myLatlng
    mapTypeId: google.maps.MapTypeId.ROADMAP
  # Attach a map to the DOM Element, with the defined settings
  map = new (google.maps.Map)(document.getElementById('map-canvas'), mapOptions)
  $('.btn').click ->
    zoom = map.getZoom()
    if zoom > 9
      map.setZoom 14
    lat = $(this).data('lat')
    lng = $(this).data('lng')
    google.maps.event.addListenerOnce map, 'idle', ->
      panTo lat, lng
      return
    return
  panPath = []
  # An array of points the current panning action will use
  panQueue = []
  # An array of subsequent panTo actions to take
  STEPS = 100

# ---
# generated by js2coffee 2.2.0